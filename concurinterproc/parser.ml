type token =
  | TK_BOOL
  | TK_UINT
  | TK_SINT
  | TK_IN
  | TK_LPAR
  | TK_RPAR
  | TK_LBRACE
  | TK_RBRACE
  | TK_LBRACKET
  | TK_RBRACKET
  | TK_RANDOM
  | TK_ASSUME
  | TK_HALT
  | TK_FAIL
  | TK_VAR
  | TK_DONE
  | TK_ENDIF
  | TK_SKIP
  | TK_YIELD
  | TK_INITIAL
  | TK_INLINE
  | TK_ATOMIC
  | TK_TYPEDEF
  | TK_ENUM
  | TK_PROC
  | TK_THREAD
  | TK_WHILE
  | TK_IF
  | TK_GOTO
  | TK_MUL of ((Apron.Texpr1.typ * Apron.Texpr1.round))
  | TK_ADD of ((Apron.Texpr1.typ * Apron.Texpr1.round))
  | TK_SUB of ((Apron.Texpr1.typ * Apron.Texpr1.round))
  | TK_DIV of ((Apron.Texpr1.typ * Apron.Texpr1.round))
  | TK_MODULO of ((Apron.Texpr1.typ * Apron.Texpr1.round))
  | TK_CAST of ((Apron.Texpr1.typ * Apron.Texpr1.round))
  | TK_SQRT of ((Apron.Texpr1.typ * Apron.Texpr1.round))
  | TK_MPQF of (Mpqf.t)
  | TK_FLOAT of (float)
  | TK_PLUS
  | TK_MINUS
  | TK_TIMES
  | TK_LEQ
  | TK_GEQ
  | TK_LT
  | TK_GT
  | TK_EQ
  | TK_NEQ
  | TK_AF
  | TK_AND
  | TK_OR
  | TK_NOT
  | TK_COMMA
  | TK_RETURNS
  | TK_COLON
  | TK_INT
  | TK_REAL
  | TK_LABEL of (string)
  | TK_ID of (string)
  | TK_DO of (Syntax.pos)
  | TK_THEN of (Syntax.pos)
  | TK_ELSE of (Syntax.pos)
  | TK_BEGIN of (Syntax.pos)
  | TK_END of (Syntax.pos)
  | TK_SEMICOLON of (Syntax.pos)
  | TK_TRUE
  | TK_FALSE
  | TK_EOF

open Parsing;;
let _ = parse_error;;
# 8 "parser.mly"
open Bddapron.Syntax
open Syntax

let pos_minus_begin pos =
  assert(pos.Syntax.col>=5);
  { pos with
    Syntax.col = pos.Syntax.col - 5;
    Syntax.char = pos.Syntax.char - 5;
  }
# 83 "parser.ml"
let yytransl_const = [|
  257 (* TK_BOOL *);
  258 (* TK_UINT *);
  259 (* TK_SINT *);
  260 (* TK_IN *);
  261 (* TK_LPAR *);
  262 (* TK_RPAR *);
  263 (* TK_LBRACE *);
  264 (* TK_RBRACE *);
  265 (* TK_LBRACKET *);
  266 (* TK_RBRACKET *);
  267 (* TK_RANDOM *);
  268 (* TK_ASSUME *);
  269 (* TK_HALT *);
  270 (* TK_FAIL *);
  271 (* TK_VAR *);
  272 (* TK_DONE *);
  273 (* TK_ENDIF *);
  274 (* TK_SKIP *);
  275 (* TK_YIELD *);
  276 (* TK_INITIAL *);
  277 (* TK_INLINE *);
  278 (* TK_ATOMIC *);
  279 (* TK_TYPEDEF *);
  280 (* TK_ENUM *);
  281 (* TK_PROC *);
  282 (* TK_THREAD *);
  283 (* TK_WHILE *);
  284 (* TK_IF *);
  285 (* TK_GOTO *);
  295 (* TK_PLUS *);
  296 (* TK_MINUS *);
  297 (* TK_TIMES *);
  298 (* TK_LEQ *);
  299 (* TK_GEQ *);
  300 (* TK_LT *);
  301 (* TK_GT *);
  302 (* TK_EQ *);
  303 (* TK_NEQ *);
  304 (* TK_AF *);
  305 (* TK_AND *);
  306 (* TK_OR *);
  307 (* TK_NOT *);
  308 (* TK_COMMA *);
  309 (* TK_RETURNS *);
  310 (* TK_COLON *);
  311 (* TK_INT *);
  312 (* TK_REAL *);
  321 (* TK_TRUE *);
  322 (* TK_FALSE *);
  323 (* TK_EOF *);
    0|]

let yytransl_block = [|
  286 (* TK_MUL *);
  287 (* TK_ADD *);
  288 (* TK_SUB *);
  289 (* TK_DIV *);
  290 (* TK_MODULO *);
  291 (* TK_CAST *);
  292 (* TK_SQRT *);
  293 (* TK_MPQF *);
  294 (* TK_FLOAT *);
  313 (* TK_LABEL *);
  314 (* TK_ID *);
  315 (* TK_DO *);
  316 (* TK_THEN *);
  317 (* TK_ELSE *);
  318 (* TK_BEGIN *);
  319 (* TK_END *);
  320 (* TK_SEMICOLON *);
    0|]

let yylhs = "\255\255\
\005\000\005\000\006\000\006\000\007\000\008\000\008\000\008\000\
\008\000\008\000\003\000\010\000\010\000\002\000\002\000\012\000\
\012\000\011\000\011\000\013\000\013\000\014\000\014\000\015\000\
\015\000\015\000\015\000\016\000\016\000\018\000\018\000\018\000\
\018\000\018\000\017\000\017\000\017\000\019\000\019\000\019\000\
\019\000\020\000\020\000\020\000\020\000\020\000\020\000\021\000\
\022\000\022\000\023\000\023\000\024\000\024\000\025\000\025\000\
\026\000\026\000\027\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\032\000\032\000\033\000\033\000\030\000\
\034\000\034\000\035\000\035\000\004\000\036\000\036\000\036\000\
\029\000\037\000\040\000\040\000\041\000\041\000\042\000\042\000\
\042\000\042\000\042\000\009\000\009\000\043\000\044\000\044\000\
\031\000\038\000\038\000\039\000\039\000\045\000\046\000\046\000\
\047\000\047\000\048\000\049\000\049\000\050\000\001\000\001\000\
\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\005\000\001\000\001\000\002\000\
\003\000\001\000\001\000\001\000\003\000\001\000\001\000\001\000\
\003\000\001\000\006\000\001\000\003\000\001\000\003\000\001\000\
\003\000\003\000\005\000\001\000\002\000\001\000\003\000\003\000\
\003\000\003\000\001\000\003\000\003\000\001\000\003\000\003\000\
\003\000\002\000\002\000\002\000\003\000\001\000\001\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\003\000\007\000\008\000\006\000\004\000\002\000\005\000\007\000\
\005\000\006\000\004\000\003\000\002\000\002\000\000\000\001\000\
\003\000\000\000\003\000\000\000\001\000\003\000\001\000\000\000\
\001\000\013\000\002\000\001\000\001\000\000\000\001\000\001\000\
\001\000\001\000\001\000\004\000\004\000\003\000\003\000\001\000\
\001\000\001\000\000\000\003\000\000\000\007\000\002\000\001\000\
\002\000\000\000\007\000\002\000\002\000\004\000\007\000\007\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\121\000\000\000\000\000\112\000\000\000\
\000\000\000\000\000\000\111\000\089\000\087\000\000\000\000\000\
\104\000\000\000\000\000\000\000\000\000\108\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\003\000\004\000\000\000\047\000\006\000\007\000\
\000\000\010\000\001\000\002\000\046\000\000\000\015\000\000\000\
\000\000\000\000\024\000\000\000\028\000\000\000\038\000\000\000\
\092\000\000\000\000\000\000\000\086\000\095\000\096\000\097\000\
\099\000\098\000\102\000\103\000\000\000\000\000\000\000\000\000\
\000\000\044\000\042\000\043\000\029\000\000\000\081\000\000\000\
\011\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\000\000\000\000\009\000\000\000\
\000\000\026\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\040\000\041\000\000\000\000\000\000\000\
\079\000\117\000\000\000\000\000\116\000\000\000\000\000\100\000\
\101\000\000\000\000\000\000\000\000\000\106\000\000\000\000\000\
\048\000\057\000\000\000\000\000\000\000\120\000\119\000\110\000\
\005\000\000\000\000\000\027\000\000\000\000\000\059\000\118\000\
\000\000\000\000\062\000\063\000\000\000\061\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\083\000\
\019\000\017\000\000\000\079\000\000\000\064\000\000\000\000\000\
\079\000\000\000\000\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\079\000\000\000\
\079\000\000\000\076\000\000\000\065\000\000\000\115\000\000\000\
\079\000\075\000\053\000\000\000\049\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\073\000\071\000\000\000\079\000\
\000\000\000\000\000\000\000\000\000\000\074\000\051\000\000\000\
\068\000\079\000\000\000\066\000\000\000\072\000\000\000\013\000\
\067\000\090\000"

let yydgoto = "\002\000\
\004\000\227\000\082\000\104\000\042\000\043\000\044\000\045\000\
\046\000\228\000\047\000\141\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\146\000\201\000\224\000\199\000\
\185\000\129\000\160\000\173\000\014\000\147\000\142\000\175\000\
\148\000\020\000\132\000\016\000\057\000\143\000\010\000\058\000\
\059\000\067\000\017\000\018\000\007\000\008\000\005\000\101\000\
\102\000\103\000"

let yysindex = "\011\000\
\027\255\000\000\228\254\000\000\039\255\069\255\000\000\228\254\
\006\255\065\255\079\255\000\000\000\000\000\000\029\255\230\254\
\000\000\068\255\011\255\106\255\132\255\000\000\006\255\055\255\
\006\255\134\255\140\255\087\255\007\255\000\000\087\255\164\255\
\164\255\164\255\000\000\000\000\139\255\000\000\000\000\000\000\
\094\255\000\000\000\000\000\000\000\000\000\255\000\000\114\255\
\133\255\108\255\000\000\181\255\000\000\223\255\000\000\174\255\
\000\000\106\255\037\255\006\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\149\255\149\255\205\255\183\255\
\180\255\000\000\000\000\000\000\000\000\001\000\000\000\149\255\
\000\000\000\000\139\255\139\255\139\255\139\255\248\255\164\255\
\164\255\164\255\164\255\164\255\164\255\164\255\164\255\164\255\
\253\255\000\000\201\255\198\255\245\255\001\255\255\255\003\000\
\221\255\015\000\018\000\000\000\007\255\087\255\000\000\133\255\
\108\255\000\000\000\000\087\255\223\255\223\255\196\255\196\255\
\196\255\196\255\000\000\000\000\000\000\006\255\220\255\229\255\
\000\000\000\000\011\255\236\255\000\000\238\255\226\255\000\000\
\000\000\021\000\251\255\246\255\040\000\000\000\053\000\039\255\
\000\000\000\000\007\000\089\001\002\000\000\000\000\000\000\000\
\000\000\087\255\087\255\000\000\029\000\198\255\000\000\000\000\
\006\255\087\255\000\000\000\000\006\255\000\000\000\000\009\000\
\011\255\011\255\025\000\079\000\030\000\037\000\000\000\000\000\
\000\000\000\000\093\000\000\000\094\000\000\000\095\000\229\255\
\000\000\049\000\052\000\000\000\006\255\229\255\063\255\006\255\
\007\000\061\000\009\000\000\000\054\000\229\255\000\000\229\255\
\000\000\112\000\000\000\117\000\000\000\121\000\000\000\003\255\
\000\000\000\000\000\000\115\000\000\000\250\254\000\000\006\255\
\039\255\011\255\123\000\071\000\000\000\000\000\229\255\000\000\
\130\000\198\255\090\000\139\000\006\255\000\000\000\000\129\000\
\000\000\000\000\011\255\000\000\142\000\000\000\007\000\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\009\255\000\000\000\000\000\000\136\255\000\000\000\000\016\255\
\129\255\169\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\255\000\000\153\255\000\000\000\000\000\000\000\000\
\129\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\255\
\128\255\183\000\000\000\107\000\000\000\202\255\000\000\000\000\
\000\000\188\255\085\000\030\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\107\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\084\000\084\000\000\000\
\230\255\000\000\000\000\000\000\000\000\000\000\000\000\157\255\
\215\000\000\000\000\000\000\000\233\255\008\000\135\000\154\000\
\170\000\199\000\000\000\000\000\000\000\064\255\000\000\092\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\144\000\000\000\000\000\000\000\085\000\
\000\000\000\000\000\000\130\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\255\000\000\000\000\000\000\129\255\000\000\000\000\000\000\
\000\000\000\000\000\000\110\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\111\000\
\000\000\000\000\000\000\000\000\015\255\074\000\000\000\064\255\
\000\000\000\000\000\000\000\000\000\000\039\001\000\000\012\001\
\000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\255\
\085\000\000\000\000\000\000\000\000\000\000\000\064\001\000\000\
\000\000\000\000\155\000\000\000\015\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\237\255\057\000\100\255\000\000\231\255\000\000\000\000\
\140\001\191\000\234\255\017\001\000\000\092\001\093\001\022\000\
\213\001\000\000\131\000\241\255\071\001\000\000\000\000\000\000\
\240\000\105\255\103\255\000\000\243\255\220\000\250\255\000\000\
\000\000\000\000\077\001\197\255\125\001\250\000\199\255\000\000\
\000\000\000\000\165\001\000\000\184\001\000\000\000\000\141\000\
\000\000\000\000"

let yytablesize = 659
let yytable = "\041\000\
\105\000\100\000\015\000\072\000\181\000\071\000\180\000\218\000\
\073\000\061\000\222\000\001\000\026\000\027\000\131\000\028\000\
\074\000\075\000\076\000\029\000\088\000\030\000\105\000\114\000\
\105\000\023\000\099\000\024\000\114\000\006\000\113\000\080\000\
\202\000\114\000\114\000\113\000\081\000\088\000\031\000\207\000\
\113\000\113\000\032\000\035\000\036\000\033\000\034\000\035\000\
\036\000\003\000\018\000\009\000\018\000\009\000\223\000\062\000\
\026\000\027\000\077\000\225\000\219\000\037\000\099\000\013\000\
\026\000\027\000\088\000\028\000\038\000\107\000\114\000\029\000\
\237\000\030\000\234\000\039\000\040\000\113\000\123\000\124\000\
\125\000\088\000\105\000\138\000\019\000\242\000\158\000\139\000\
\026\000\027\000\031\000\028\000\022\000\140\000\032\000\029\000\
\018\000\033\000\034\000\035\000\036\000\105\000\021\000\018\000\
\018\000\018\000\114\000\115\000\018\000\063\000\064\000\149\000\
\065\000\037\000\031\000\088\000\011\000\088\000\032\000\025\000\
\204\000\033\000\034\000\035\000\036\000\106\000\107\000\039\000\
\040\000\105\000\056\000\177\000\140\000\020\000\174\000\020\000\
\111\000\037\000\060\000\182\000\026\000\027\000\069\000\028\000\
\038\000\080\000\080\000\029\000\070\000\186\000\187\000\039\000\
\040\000\085\000\086\000\109\000\105\000\079\000\183\000\226\000\
\109\000\109\000\021\000\083\000\021\000\026\000\027\000\094\000\
\028\000\105\000\032\000\205\000\029\000\033\000\034\000\035\000\
\036\000\020\000\094\000\020\000\088\000\084\000\088\000\082\000\
\087\000\081\000\020\000\020\000\020\000\037\000\080\000\020\000\
\080\000\082\000\082\000\032\000\038\000\109\000\033\000\034\000\
\035\000\036\000\093\000\039\000\040\000\035\000\021\000\035\000\
\021\000\035\000\108\000\088\000\089\000\093\000\094\000\021\000\
\021\000\021\000\117\000\118\000\021\000\038\000\090\000\091\000\
\092\000\093\000\088\000\089\000\039\000\040\000\082\000\097\000\
\035\000\035\000\109\000\085\000\036\000\085\000\036\000\110\000\
\036\000\130\000\133\000\035\000\035\000\035\000\035\000\035\000\
\035\000\093\000\035\000\035\000\094\000\035\000\116\000\095\000\
\096\000\126\000\127\000\128\000\035\000\035\000\035\000\036\000\
\036\000\035\000\135\000\037\000\131\000\037\000\099\000\037\000\
\023\000\144\000\036\000\036\000\036\000\036\000\036\000\036\000\
\136\000\036\000\036\000\137\000\036\000\145\000\153\000\088\000\
\089\000\152\000\047\000\036\000\036\000\036\000\037\000\037\000\
\036\000\155\000\090\000\091\000\092\000\093\000\150\000\156\000\
\151\000\037\000\037\000\037\000\037\000\037\000\037\000\154\000\
\037\000\037\000\157\000\037\000\047\000\047\000\047\000\047\000\
\047\000\176\000\037\000\037\000\037\000\159\000\184\000\037\000\
\047\000\047\000\047\000\047\000\047\000\047\000\077\000\047\000\
\047\000\179\000\188\000\189\000\191\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\190\000\047\000\077\000\
\058\000\192\000\195\000\194\000\077\000\077\000\077\000\058\000\
\058\000\058\000\058\000\198\000\208\000\058\000\058\000\200\000\
\030\000\058\000\030\000\056\000\210\000\215\000\058\000\058\000\
\058\000\216\000\056\000\056\000\056\000\056\000\217\000\229\000\
\056\000\056\000\221\000\077\000\056\000\230\000\077\000\233\000\
\077\000\056\000\056\000\056\000\033\000\235\000\033\000\193\000\
\236\000\238\000\109\000\241\000\197\000\058\000\084\000\016\000\
\030\000\030\000\058\000\030\000\030\000\089\000\030\000\031\000\
\012\000\031\000\212\000\066\000\214\000\030\000\030\000\030\000\
\056\000\240\000\030\000\178\000\220\000\056\000\112\000\034\000\
\113\000\034\000\209\000\134\000\033\000\033\000\098\000\033\000\
\033\000\206\000\033\000\232\000\022\000\068\000\022\000\012\000\
\000\000\033\000\033\000\033\000\000\000\239\000\033\000\031\000\
\031\000\000\000\031\000\031\000\032\000\031\000\032\000\000\000\
\000\000\000\000\000\000\000\000\031\000\031\000\031\000\034\000\
\034\000\031\000\034\000\034\000\023\000\034\000\023\000\000\000\
\000\000\000\000\000\000\000\000\034\000\034\000\034\000\022\000\
\022\000\034\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\022\000\022\000\032\000\032\000\022\000\032\000\
\032\000\078\000\032\000\000\000\000\000\000\000\196\000\000\000\
\000\000\032\000\032\000\032\000\203\000\000\000\032\000\023\000\
\023\000\000\000\023\000\000\000\211\000\000\000\213\000\000\000\
\050\000\023\000\023\000\023\000\000\000\000\000\023\000\050\000\
\050\000\050\000\050\000\000\000\050\000\050\000\050\000\000\000\
\000\000\050\000\000\000\000\000\000\000\231\000\050\000\050\000\
\050\000\078\000\078\000\054\000\000\000\000\000\119\000\120\000\
\121\000\122\000\054\000\054\000\054\000\054\000\054\000\000\000\
\054\000\054\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\054\000\054\000\054\000\052\000\050\000\000\000\000\000\
\050\000\000\000\000\000\052\000\052\000\052\000\052\000\000\000\
\052\000\052\000\052\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\052\000\052\000\052\000\161\000\000\000\000\000\
\054\000\000\000\000\000\000\000\162\000\163\000\164\000\165\000\
\000\000\000\000\166\000\167\000\000\000\000\000\168\000\000\000\
\000\000\000\000\000\000\169\000\170\000\171\000\000\000\000\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\172\000"

let yycheck = "\019\000\
\060\000\059\000\009\000\029\000\161\000\028\000\158\000\005\001\
\031\000\023\000\017\001\001\000\002\001\003\001\014\001\005\001\
\032\000\033\000\034\000\009\001\006\001\011\001\004\001\015\001\
\006\001\052\001\026\001\054\001\020\001\058\001\015\001\032\001\
\189\000\025\001\026\001\020\001\037\001\008\001\028\001\193\000\
\025\001\026\001\032\001\037\001\038\001\035\001\036\001\037\001\
\038\001\023\001\006\001\015\001\008\001\015\001\061\001\001\001\
\002\001\003\001\037\000\216\000\058\001\051\001\026\001\058\001\
\002\001\003\001\052\001\005\001\058\001\006\001\062\001\009\001\
\229\000\011\001\226\000\065\001\066\001\062\001\094\000\095\000\
\096\000\052\001\064\001\109\000\020\001\239\000\144\000\110\000\
\002\001\003\001\028\001\005\001\064\001\116\000\032\001\009\001\
\052\001\035\001\036\001\037\001\038\001\161\000\024\001\059\001\
\060\001\061\001\085\000\086\000\064\001\055\001\056\001\131\000\
\058\001\051\001\028\001\052\001\048\001\054\001\032\001\052\001\
\058\001\035\001\036\001\037\001\038\001\069\000\070\000\065\001\
\066\001\189\000\025\001\154\000\155\000\006\001\148\000\008\001\
\080\000\051\001\007\001\162\000\002\001\003\001\009\001\005\001\
\058\001\016\001\017\001\009\001\009\001\169\000\170\000\065\001\
\066\001\046\001\047\001\020\001\216\000\064\001\165\000\217\000\
\025\001\026\001\006\001\050\001\008\001\002\001\003\001\015\001\
\005\001\229\000\032\001\191\000\009\001\035\001\036\001\037\001\
\038\001\050\001\026\001\052\001\052\001\049\001\054\001\015\001\
\004\001\037\001\059\001\060\001\061\001\051\001\061\001\064\001\
\063\001\025\001\026\001\032\001\058\001\062\001\035\001\036\001\
\037\001\038\001\015\001\065\001\066\001\004\001\050\001\006\001\
\052\001\008\001\006\001\031\001\032\001\026\001\062\001\059\001\
\060\001\061\001\088\000\089\000\064\001\058\001\042\001\043\001\
\044\001\045\001\031\001\032\001\065\001\066\001\062\001\058\001\
\031\001\032\001\052\001\006\001\004\001\008\001\006\001\060\001\
\008\001\101\000\102\000\042\001\043\001\044\001\045\001\046\001\
\047\001\062\001\049\001\050\001\030\001\052\001\007\001\033\001\
\034\001\005\001\058\001\062\001\059\001\060\001\061\001\031\001\
\032\001\064\001\008\001\004\001\014\001\006\001\026\001\008\001\
\052\001\054\001\042\001\043\001\044\001\045\001\046\001\047\001\
\010\001\049\001\050\001\010\001\052\001\057\001\010\001\031\001\
\032\001\064\001\004\001\059\001\060\001\061\001\031\001\032\001\
\064\001\052\001\042\001\043\001\044\001\045\001\067\001\008\001\
\067\001\042\001\043\001\044\001\045\001\046\001\047\001\061\001\
\049\001\050\001\006\001\052\001\030\001\031\001\032\001\033\001\
\034\001\064\001\059\001\060\001\061\001\063\001\062\001\064\001\
\042\001\043\001\044\001\045\001\046\001\047\001\005\001\049\001\
\050\001\053\001\058\001\005\001\048\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\064\001\064\001\022\001\
\005\001\005\001\004\001\006\001\027\001\028\001\029\001\012\001\
\013\001\014\001\015\001\059\001\048\001\018\001\019\001\060\001\
\006\001\022\001\008\001\005\001\063\001\006\001\027\001\028\001\
\029\001\005\001\012\001\013\001\014\001\015\001\006\001\005\001\
\018\001\019\001\016\001\058\001\022\001\063\001\061\001\006\001\
\063\001\027\001\028\001\029\001\006\001\052\001\008\001\180\000\
\006\001\017\001\062\001\006\001\185\000\058\001\067\001\008\001\
\046\001\047\001\063\001\049\001\050\001\048\001\052\001\006\001\
\006\001\008\001\199\000\024\000\201\000\059\001\060\001\061\001\
\058\001\235\000\064\001\155\000\209\000\063\001\083\000\006\001\
\084\000\008\001\195\000\103\000\046\001\047\001\058\000\049\001\
\050\001\192\000\052\001\224\000\006\001\025\000\008\001\008\000\
\255\255\059\001\060\001\061\001\255\255\234\000\064\001\046\001\
\047\001\255\255\049\001\050\001\006\001\052\001\008\001\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\046\001\
\047\001\064\001\049\001\050\001\006\001\052\001\008\001\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\049\001\
\050\001\064\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\046\001\047\001\064\001\049\001\
\050\001\037\000\052\001\255\255\255\255\255\255\184\000\255\255\
\255\255\059\001\060\001\061\001\190\000\255\255\064\001\049\001\
\050\001\255\255\052\001\255\255\198\000\255\255\200\000\255\255\
\005\001\059\001\060\001\061\001\255\255\255\255\064\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\019\001\255\255\
\255\255\022\001\255\255\255\255\255\255\223\000\027\001\028\001\
\029\001\085\000\086\000\005\001\255\255\255\255\090\000\091\000\
\092\000\093\000\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\027\001\028\001\029\001\005\001\058\001\255\255\255\255\
\061\001\255\255\255\255\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\019\001\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\005\001\255\255\255\255\
\058\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\027\001\028\001\029\001\255\255\255\255\
\255\255\058\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\058\001"

let yynames_const = "\
  TK_BOOL\000\
  TK_UINT\000\
  TK_SINT\000\
  TK_IN\000\
  TK_LPAR\000\
  TK_RPAR\000\
  TK_LBRACE\000\
  TK_RBRACE\000\
  TK_LBRACKET\000\
  TK_RBRACKET\000\
  TK_RANDOM\000\
  TK_ASSUME\000\
  TK_HALT\000\
  TK_FAIL\000\
  TK_VAR\000\
  TK_DONE\000\
  TK_ENDIF\000\
  TK_SKIP\000\
  TK_YIELD\000\
  TK_INITIAL\000\
  TK_INLINE\000\
  TK_ATOMIC\000\
  TK_TYPEDEF\000\
  TK_ENUM\000\
  TK_PROC\000\
  TK_THREAD\000\
  TK_WHILE\000\
  TK_IF\000\
  TK_GOTO\000\
  TK_PLUS\000\
  TK_MINUS\000\
  TK_TIMES\000\
  TK_LEQ\000\
  TK_GEQ\000\
  TK_LT\000\
  TK_GT\000\
  TK_EQ\000\
  TK_NEQ\000\
  TK_AF\000\
  TK_AND\000\
  TK_OR\000\
  TK_NOT\000\
  TK_COMMA\000\
  TK_RETURNS\000\
  TK_COLON\000\
  TK_INT\000\
  TK_REAL\000\
  TK_TRUE\000\
  TK_FALSE\000\
  TK_EOF\000\
  "

let yynames_block = "\
  TK_MUL\000\
  TK_ADD\000\
  TK_SUB\000\
  TK_DIV\000\
  TK_MODULO\000\
  TK_CAST\000\
  TK_SQRT\000\
  TK_MPQF\000\
  TK_FLOAT\000\
  TK_LABEL\000\
  TK_ID\000\
  TK_DO\000\
  TK_THEN\000\
  TK_ELSE\000\
  TK_BEGIN\000\
  TK_END\000\
  TK_SEMICOLON\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'scalar) in
    Obj.repr(
# 65 "parser.mly"
         ( Apron.Coeff.Scalar _1 )
# 561 "parser.ml"
               : 'coeff))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'interval) in
    Obj.repr(
# 66 "parser.mly"
           ( Apron.Coeff.Interval _1 )
# 568 "parser.ml"
               : 'coeff))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Mpqf.t) in
    Obj.repr(
# 68 "parser.mly"
          ( Apron.Scalar.Mpqf(_1) )
# 575 "parser.ml"
               : 'scalar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 69 "parser.mly"
           ( Apron.Scalar.Float(_1) )
# 582 "parser.ml"
               : 'scalar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'scalar) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'scalar) in
    Obj.repr(
# 72 "parser.mly"
   ( Apron.Interval.of_scalar _2 _4 )
# 590 "parser.ml"
               : 'interval))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
           ( `Bool(true) )
# 596 "parser.ml"
               : 'cst))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
           ( `Bool(false) )
# 602 "parser.ml"
               : 'cst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bint) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
           (
    `Bint(_1,_2) )
# 611 "parser.ml"
               : 'cst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bint) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (Apron.Texpr1.typ * Apron.Texpr1.round)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 78 "parser.mly"
                  ( `Bint(_1,-_3) )
# 620 "parser.ml"
               : 'cst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'coeff) in
    Obj.repr(
# 79 "parser.mly"
        ( `Apron _1 )
# 627 "parser.ml"
               : 'cst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Mpqf.t) in
    Obj.repr(
# 81 "parser.mly"
(
  let mpqf = _1 in
  if Mpzf.cmp_int (Mpqf.get_den mpqf) 1 = 0 then
    let mpz = Mpqf.get_num mpqf in
    Mpz.get_int mpz
  else
    raise (Error (Print.sprintf "Error: expecting integer here"))
)
# 641 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Bddapron.Syntax.expr option) in
    Obj.repr(
# 91 "parser.mly"
       ( [_1] )
# 648 "parser.ml"
               : 'list_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Bddapron.Syntax.expr option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_expr) in
    Obj.repr(
# 92 "parser.mly"
                          ( _1::_3 )
# 656 "parser.ml"
               : 'list_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
            ( None )
# 662 "parser.ml"
               : string Bddapron.Syntax.expr option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr0) in
    Obj.repr(
# 96 "parser.mly"
        ( Some _1 )
# 669 "parser.ml"
               : string Bddapron.Syntax.expr option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr0) in
    Obj.repr(
# 99 "parser.mly"
        ( [_1] )
# 676 "parser.ml"
               : 'list_expr0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr0) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_expr0) in
    Obj.repr(
# 100 "parser.mly"
                            ( _1::_3 )
# 684 "parser.ml"
               : 'list_expr0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 103 "parser.mly"
        ( _1 )
# 691 "parser.ml"
               : 'expr0))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr0) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Syntax.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr0) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Syntax.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr0) in
    Obj.repr(
# 104 "parser.mly"
                                          ( `If(_2,_4,_6) )
# 702 "parser.ml"
               : 'expr0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 106 "parser.mly"
        ( _1 )
# 709 "parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 107 "parser.mly"
                      ( `Binop(`Bool `Or,_1,_3) )
# 717 "parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr3) in
    Obj.repr(
# 109 "parser.mly"
        ( _1 )
# 724 "parser.ml"
               : 'expr2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr3) in
    Obj.repr(
# 110 "parser.mly"
                      ( `Binop(`Bool `And,_1,_3) )
# 732 "parser.ml"
               : 'expr2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 112 "parser.mly"
        ( _1 )
# 739 "parser.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 113 "parser.mly"
                      ( `Binop((`Bool `NEQ),_1,_3) )
# 747 "parser.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 114 "parser.mly"
                      ( `Binop((`Bool `EQ),_1,_3) )
# 755 "parser.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr6) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'list_expr0) in
    Obj.repr(
# 115 "parser.mly"
                                              ( `In(_1,_4) )
# 763 "parser.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr5) in
    Obj.repr(
# 117 "parser.mly"
        ( _1 )
# 770 "parser.ml"
               : 'expr4))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 118 "parser.mly"
               ( `Unop(`Not,_2) )
# 777 "parser.ml"
               : 'expr4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr6) in
    Obj.repr(
# 120 "parser.mly"
        ( _1 )
# 784 "parser.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr6) in
    Obj.repr(
# 121 "parser.mly"
                     ( `Binop(`Bool `GEQ,_1,_3) )
# 792 "parser.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr6) in
    Obj.repr(
# 122 "parser.mly"
                    ( `Binop(`Bool `GT,_1,_3) )
# 800 "parser.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr6) in
    Obj.repr(
# 123 "parser.mly"
                     ( `Binop(`Bool `LEQ,_1,_3) )
# 808 "parser.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr6) in
    Obj.repr(
# 124 "parser.mly"
                    ( `Binop(`Bool `LT,_1,_3) )
# 816 "parser.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr7) in
    Obj.repr(
# 126 "parser.mly"
        ( _1 )
# 823 "parser.ml"
               : 'expr6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr6) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (Apron.Texpr1.typ * Apron.Texpr1.round)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr7) in
    Obj.repr(
# 128 "parser.mly"
    ( let (t,r) = _2 in `Binop(`Apron(Apron.Texpr1.Add,t,r), _1,_3) )
# 832 "parser.ml"
               : 'expr6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr6) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (Apron.Texpr1.typ * Apron.Texpr1.round)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr7) in
    Obj.repr(
# 130 "parser.mly"
    ( let (t,r) = _2 in `Binop(`Apron(Apron.Texpr1.Sub,t,r), _1,_3) )
# 841 "parser.ml"
               : 'expr6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr8) in
    Obj.repr(
# 132 "parser.mly"
        ( _1 )
# 848 "parser.ml"
               : 'expr7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (Apron.Texpr1.typ * Apron.Texpr1.round)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr8) in
    Obj.repr(
# 134 "parser.mly"
    ( let (t,r) = _2 in `Binop(`Apron(Apron.Texpr1.Mul,t,r), _1,_3) )
# 857 "parser.ml"
               : 'expr7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (Apron.Texpr1.typ * Apron.Texpr1.round)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr8) in
    Obj.repr(
# 136 "parser.mly"
    ( let (t,r) = _2 in `Binop(`Apron(Apron.Texpr1.Div,t,r), _1,_3) )
# 866 "parser.ml"
               : 'expr7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (Apron.Texpr1.typ * Apron.Texpr1.round)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr8) in
    Obj.repr(
# 138 "parser.mly"
    ( let (t,r) = _2 in `Binop(`Apron(Apron.Texpr1.Mod,t,r), _1,_3) )
# 875 "parser.ml"
               : 'expr7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : (Apron.Texpr1.typ * Apron.Texpr1.round)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr8) in
    Obj.repr(
# 141 "parser.mly"
    ( let (t,r) = _1 in `Unop(`Apron(Apron.Texpr1.Cast,t,r),_2) )
# 883 "parser.ml"
               : 'expr8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : (Apron.Texpr1.typ * Apron.Texpr1.round)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr8) in
    Obj.repr(
# 143 "parser.mly"
    ( let (t,r) = _1 in `Unop(`Apron(Apron.Texpr1.Sqrt,t,r),_2) )
# 891 "parser.ml"
               : 'expr8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : (Apron.Texpr1.typ * Apron.Texpr1.round)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr8) in
    Obj.repr(
# 145 "parser.mly"
    ( let (t,r) = _1 in `Unop(`Apron(Apron.Texpr1.Neg,t,r),_2) )
# 899 "parser.ml"
               : 'expr8))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr0) in
    Obj.repr(
# 147 "parser.mly"
    ( _2 )
# 906 "parser.ml"
               : 'expr8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cst) in
    Obj.repr(
# 149 "parser.mly"
   ( `Cst _1 )
# 913 "parser.ml"
               : 'expr8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 151 "parser.mly"
    ( `Ref _1 )
# 920 "parser.ml"
               : 'expr8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 153 "parser.mly"
                ( _1 )
# 927 "parser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 156 "parser.mly"
                ( Lab(_2,[||],true) )
# 935 "parser.ml"
               : 'tk_then))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 157 "parser.mly"
          ( Pos(_1,[||]) )
# 942 "parser.ml"
               : 'tk_then))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 159 "parser.mly"
                ( Lab(_2,[||],true) )
# 950 "parser.ml"
               : 'tk_else))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 160 "parser.mly"
          ( Pos(_1,[||]) )
# 957 "parser.ml"
               : 'tk_else))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 162 "parser.mly"
              ( Lab(_2,[||],true) )
# 965 "parser.ml"
               : 'tk_do))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 163 "parser.mly"
        ( Pos(_1,[||]) )
# 972 "parser.ml"
               : 'tk_do))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 165 "parser.mly"
                 ( Lab(_2,[||],true) )
# 980 "parser.ml"
               : 'tk_begin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 166 "parser.mly"
           ( Pos(_1,[||]) )
# 987 "parser.ml"
               : 'tk_begin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 168 "parser.mly"
                 ( (Pos(pos_minus_begin _1,[||]), Lab(_2,[||],true)) )
# 995 "parser.ml"
               : 'tk_begin2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 169 "parser.mly"
           ( (Pos(pos_minus_begin _1,[||]), Pos(_1,[||])) )
# 1002 "parser.ml"
               : 'tk_begin2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 172 "parser.mly"
       ( Pos(_1,[||]) )
# 1009 "parser.ml"
               : 'tk_end))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "parser.mly"
      ( YIELD )
# 1015 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
      ( SKIP )
# 1021 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "parser.mly"
      ( HALT )
# 1027 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "parser.mly"
      ( FAIL )
# 1033 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr0) in
    Obj.repr(
# 184 "parser.mly"
      ( ASSUME(_2) )
# 1040 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Bddapron.Syntax.expr option) in
    Obj.repr(
# 186 "parser.mly"
      ( ASSIGN ([_1],[_3]) )
# 1048 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'list_expr) in
    Obj.repr(
# 188 "parser.mly"
      ( ASSIGN (_2,_6) )
# 1056 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string list) in
    Obj.repr(
# 190 "parser.mly"
      ( CALL (_2,_5,_7) )
# 1065 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string list) in
    Obj.repr(
# 192 "parser.mly"
      ( CALL ([_1],_3,_5) )
# 1074 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string list) in
    Obj.repr(
# 194 "parser.mly"
      ( CALL ([],_1,_3) )
# 1082 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 196 "parser.mly"
      ( GOTO(Lab(_2,[||],true)) )
# 1089 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Bddapron.Syntax.expr option) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tk_then) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    Obj.repr(
# 198 "parser.mly"
      ( IF (_2, { bpoint=_3; instrs = _4 }, None) )
# 1098 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Bddapron.Syntax.expr option) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'tk_then) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'instr_seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tk_else) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    Obj.repr(
# 200 "parser.mly"
      ( IF(_2,
	   { bpoint=_3; instrs = _4},
	   Some { bpoint=_5; instrs = _6})
      )
# 1112 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Bddapron.Syntax.expr option) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tk_do) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    Obj.repr(
# 205 "parser.mly"
      ( LOOP (_2, { bpoint=_3; instrs = _4}) )
# 1121 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'declarations) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tk_begin) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 207 "parser.mly"
      ( LOCAL(true, _2, { bpoint=_4; instrs = _5 }) )
# 1131 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tk_begin) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 209 "parser.mly"
      ( ATOMIC({ bpoint=_2; instrs = _3 }) )
# 1140 "parser.ml"
               : 'instruction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'instruction) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 213 "parser.mly"
    ( { instruction = _1; ipoint = Lab(_3,[||],true) } )
# 1149 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instruction) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 215 "parser.mly"
    ( { instruction = _1; ipoint = Pos(_2,[||]) } )
# 1157 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'revinstr_seq) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 219 "parser.mly"
    ( _2::_1 )
# 1165 "parser.ml"
               : 'revinstr_seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "parser.mly"
    ( [] )
# 1171 "parser.ml"
               : 'revinstr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'revinstr_seq) in
    Obj.repr(
# 223 "parser.mly"
                        ( List.rev _1 )
# 1178 "parser.ml"
               : 'instr_seq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string Bddapron.Syntax.expr option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 227 "parser.mly"
    ( _2 )
# 1186 "parser.ml"
               : 'initial))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "parser.mly"
  ( None )
# 1192 "parser.ml"
               : 'initial))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string Bddapron.Syntax.expr option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 231 "parser.mly"
    ( _2 )
# 1200 "parser.ml"
               : 'fail))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "parser.mly"
  ( None )
# 1206 "parser.ml"
               : 'fail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'revvariables) in
    Obj.repr(
# 234 "parser.mly"
                        ( List.rev _1 )
# 1213 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'revvariables) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 236 "parser.mly"
                                 ( _3::_1 )
# 1221 "parser.ml"
               : 'revvariables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 237 "parser.mly"
           ( [_1] )
# 1228 "parser.ml"
               : 'revvariables))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "parser.mly"
  ( [] )
# 1234 "parser.ml"
               : 'revvariables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 240 "parser.mly"
                ( _1 )
# 1241 "parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'declarations0) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'declarations0) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'vardeclarations) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'tk_begin2) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    let _13 = (Parsing.peek_val __caml_parser_env 0 : 'tk_end) in
    Obj.repr(
# 244 "parser.mly"
    (
      let (bbpoint,bpoint) = _11 in
      let code = { bpoint = bpoint; instrs = _12 } in
      let block =
	if _10=[] then
	  code
	else
	  let maininstr = {
	    instruction = LOCAL(false, _10, code);
	    ipoint = _13;
	  }
	  in
	  { bpoint = bbpoint; instrs = [maininstr] }
      in
      {
	pname = _2;
	pinput = _4;
	poutput = _8;
	pcode = block;
      }
    )
# 1274 "parser.ml"
               : 'procedure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'revprocedures) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'procedure) in
    Obj.repr(
# 267 "parser.mly"
                          ( (_2.pname, _2)::_1 )
# 1282 "parser.ml"
               : 'revprocedures))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure) in
    Obj.repr(
# 268 "parser.mly"
            ( [(_1.pname, _1)] )
# 1289 "parser.ml"
               : 'revprocedures))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'revprocedures) in
    Obj.repr(
# 271 "parser.mly"
                ( _1 )
# 1296 "parser.ml"
               : 'revprocedures0))
; (fun __caml_parser_env ->
    Obj.repr(
# 272 "parser.mly"
   ( [] )
# 1302 "parser.ml"
               : 'revprocedures0))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "parser.mly"
          ( `Bool )
# 1308 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 277 "parser.mly"
         ( (`Int) )
# 1314 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 278 "parser.mly"
          ( (`Real) )
# 1320 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bint) in
    Obj.repr(
# 279 "parser.mly"
       ( (`Bint _1) )
# 1327 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 280 "parser.mly"
        ( (`Benum _1) )
# 1334 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 283 "parser.mly"
(
  if _3 < 0 then
    raise (Error (Print.sprintf "Error: in type uint[x], x should be positive"))
  ;
  (false,_3)
)
# 1346 "parser.ml"
               : 'bint))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 290 "parser.mly"
(
  if _3 < 0 then
    raise (Error (Print.sprintf "Error: in type sint[x], x should be positive"))
  ;
  (true,_3)
)
# 1358 "parser.ml"
               : 'bint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'revvariables) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 299 "parser.mly"
  (
    let lvar = _1 and typ = _3 in
    List.map (fun var -> (var,typ)) lvar
  )
# 1369 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'revdeclarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 305 "parser.mly"
                                       ( _3 @ _1 )
# 1377 "parser.ml"
               : 'revdeclarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 306 "parser.mly"
              ( _1 )
# 1384 "parser.ml"
               : 'revdeclarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'revdeclarations) in
    Obj.repr(
# 309 "parser.mly"
                  ( List.rev _1 )
# 1391 "parser.ml"
               : 'declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declarations) in
    Obj.repr(
# 311 "parser.mly"
               ( _1 )
# 1398 "parser.ml"
               : 'declarations0))
; (fun __caml_parser_env ->
    Obj.repr(
# 312 "parser.mly"
  ( [] )
# 1404 "parser.ml"
               : 'declarations0))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 316 "parser.mly"
    ( _2 )
# 1412 "parser.ml"
               : 'vardeclarations))
; (fun __caml_parser_env ->
    Obj.repr(
# 317 "parser.mly"
  ( [] )
# 1418 "parser.ml"
               : 'vardeclarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.pos) in
    Obj.repr(
# 321 "parser.mly"
    ( (_1,Array.of_list _5) )
# 1427 "parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ltypedef) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 324 "parser.mly"
                   (_2::_1)
# 1435 "parser.ml"
               : 'ltypedef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 325 "parser.mly"
          ([_1])
# 1442 "parser.ml"
               : 'ltypedef))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ltypedef) in
    Obj.repr(
# 328 "parser.mly"
                      ( _2 )
# 1449 "parser.ml"
               : 'typedefs))
; (fun __caml_parser_env ->
    Obj.repr(
# 329 "parser.mly"
  ([])
# 1455 "parser.ml"
               : 'typedefs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'vardeclarations) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tk_begin2) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'tk_end) in
    Obj.repr(
# 333 "parser.mly"
  (
    let (bbpoint,bpoint) = _5 in
    let proc =
      let code = { bpoint = bpoint; instrs = _6 } in
      let block =
	if _4=[] then
	  code
	else
	  let maininstr = {
	    instruction = LOCAL(false, _4, code);
	    ipoint = _7;
	  }
	  in
	  { bpoint = bbpoint; instrs = [maininstr] }
      in
      {
	pname = _2;
	pinput = [];
	poutput = [];
	pcode = block;
      }
    in
    (proc.pname,proc)
  )
# 1489 "parser.ml"
               : 'thread))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'revthreads) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'thread) in
    Obj.repr(
# 359 "parser.mly"
                    ( _2::_1 )
# 1497 "parser.ml"
               : 'revthreads))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'thread) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'thread) in
    Obj.repr(
# 360 "parser.mly"
                ( [_2;_1] )
# 1505 "parser.ml"
               : 'revthreads))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'vardeclarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tk_begin2) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tk_end) in
    Obj.repr(
# 364 "parser.mly"
  (
    let (bbpoint,bpoint) = _2 in
    let proc =
      let code = { bpoint = bpoint; instrs = _3 } in
      let block =
	if _1=[] then
	  code
	else
	  let maininstr = {
	    instruction = LOCAL(false, _1, code);
	    ipoint = _4;
	  }
	  in
	  { bpoint = bbpoint; instrs = [maininstr] }
      in
      {
	pname = "";
	pinput = [];
	poutput = [];
	pcode = block;
      }
    in
    (proc.pname,proc)
  )
# 1538 "parser.ml"
               : 'thread0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'typedefs) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'vardeclarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'initial) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'revprocedures0) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'thread0) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'fail) in
    Obj.repr(
# 398 "parser.mly"
  (
    {
      typenumdef = _1;
      global = _2;
      initial = _3;
      final = _6;
      procedures = List.rev (_5 :: _4);
      threads = [fst _5];
    }
  )
# 1559 "parser.ml"
               : string Syntax.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'typedefs) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'vardeclarations) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'initial) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'revprocedures0) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'revthreads) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'fail) in
    Obj.repr(
# 409 "parser.mly"
    (
      {
	typenumdef = _1;
	global = _2;
	initial = _3;
	final = _6;
	procedures = List.rev (_5 @ _4);
	threads = List.fold_left
	(begin fun res (name,proc) -> name::res end)
	[] _5
      }
    )
# 1582 "parser.ml"
               : string Syntax.program))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : string Syntax.program)
