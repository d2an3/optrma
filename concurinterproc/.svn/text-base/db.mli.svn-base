type var = Syntax.var
type point = Syntax.point

type instrum = {
  mutable isyncond : Syntax.var Bddapron.Syntax.expr;
  mutable icond : Syntax.var Bddapron.Expr2.Bool.t option;
}

type 'a procedure = {
  pname : string;
  (** Procedure name *)
  mutable pinput : Syntax.var Syntax.declaration list;
  (** List of input parameters *)
  mutable poutput : Syntax.var Syntax.declaration list;
  (** List of output parameters *)
  mutable pcode : Syntax.var Syntax.block;
  (** Code of the procedure *)
  mutable vars : (Syntax.local, Syntax.var Bddapron.Env.typ) Mappe.t;
  (** Include instrumentation variables *)
  mutable instrumInput : instrum;
  mutable instrumOutput : instrum;
  mutable linput : [`Local of string * string * [`Input]] list;
  mutable loutput : [`Local of string * string * [`Output]] list;
  mutable linputtmp : [`Local of string * string * [`Tmp]] list;
  mutable loutputtmp : [`Local of string * string * [`Tmp]] list;
  mutable linputfrozen : [`Local of string * string * [`InputFrozen]] list;
  mutable linputcst : [`Local of string * string * [`Input | `InputFrozen]] list;
  mutable linputnotcst : [`Local of string * string * [`Input]] list;
  mutable loutputcopy : [`Local of string * string * [`OutputCopy]] list;
  mutable pext : 'a;
}

type ('a,'b) thread = {
  tname : string;
    (** Thread name *)
  tindex  : int;
    (** Thread number *)
  mutable tvars : (Syntax.global, Syntax.var Bddapron.Env.typ) Mappe.t;
    (** Set of global variables (current + possibly input + possibly output) *)
  mutable lglobalinput : [`Global of string * [`Input of string]] list;
  mutable lglobaloutput : [`Global of string * [`Output of string]] list;
  mutable tprocedures : (string,'a procedure) Mappe.t;
    (** Thread procedures *)
  mutable proccallsites : (string, point PSette.t) Hashhe.t;
    (** Association [procedure (name) -> set of callsites] *)
  mutable text : 'b;
}

type ('a,'b) program = {
  mutable typenumdef : (Syntax.var * Syntax.var array) list;
  (** Enumerated types definition. A definition is a pair
      [(name, list of labels)] *)
(*
  mutable global : Syntax.var Syntax.declaration list;
*)
  mutable gvars : (Syntax.global, Syntax.var Bddapron.Env.typ) Mappe.t;
    (** Set of global variables *)
  mutable pcs :  ([`Pc of string], Syntax.var Bddapron.Env.typ) Mappe.t;
    (** Program counters *)
  mutable lglobal : [`Global of string * [`Current]] list;
  mutable lglobaltmp : [`Global of string * [`Tmp]] list;
  mutable initial : Syntax.var Bddapron.Syntax.expr option;
  mutable final : Syntax.var Bddapron.Syntax.expr option;
  mutable lthreads : string list;
  mutable threads : ('a,'b) thread array;
  mutable env : Syntax.var Bddapron.Env.t;
  mutable cond0 : Syntax.var Bddapron.Cond.t;
  startexit : (point,point) PDHashhe.t;
    (** Two-way association start points/exit points of procedures *)
  callret : (point,point) PDHashhe.t;
    (** Two-way association call points/return points generated by
	procedure calls. *)
  pointproc : (point,string) PHashhe.t;
    (** Hashtable [point,name of enclosing procedure/thread] *)
}

val instrum_dummy : instrum

val print_procedure :
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a procedure -> unit
val print_thread :
  (Format.formatter -> 'a -> unit) ->
  (Format.formatter -> 'b -> unit) ->
  Format.formatter -> ('a,'b) thread -> unit
val print_prog :
  (Format.formatter -> 'a -> unit) ->
  (Format.formatter -> 'b -> unit) ->
  Format.formatter -> ('a,'b) program -> unit

val lvaraux : ('a, 'b) program -> Syntax.var list
  (** Returns the list of instrumentation variables *)

(*
val db_to_synprog : prog -> Syntax.var Syntax.program
*)
